generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../src/features/_global/domain/schemas/zod"
  useMultipleFiles                 = true
  createInputTypes                 = false
  addInputTypeValidation           = false
  validateWhereUniqueInput         = false
  createOptionalDefaultValuesTypes = true
  createPartialTypes               = true
  writeNullishInModelTypes         = true
}

model MedicalPatient {
  id                String    @id @default(cuid())
  rut               String    @unique
  name              String
  middleName        String?
  lastName          String
  secondaryLastName String?
  address           String?
  email             String?
  phone             String?
  birthdate         DateTime?

  // Relation
  medicalExamination MedicalExamination[]

  // common
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Doctor {
  id                String    @id @default(cuid())
  rut               String    @unique
  name              String
  middleName        String?
  lastName          String
  secondaryLastName String?
  address           String?
  email             String?
  phone             String?
  birthdate         DateTime?

  // Relation
  medicalExamination MedicalExamination[]
  medicalProfession  MedicalProfession[]

  // common
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MedicalProfession {
  id             String @id @default(cuid())
  name           String
  specialization String

  // Relation
  doctor Doctor[]

  // common
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MedicalExamination {
  id       String   @id @default(cuid())
  dateExam DateTime @default(now())

  // Relation
  medicalPatient           MedicalPatient         @relation(fields: [medicalPatientId], references: [id])
  medicalPatientId         String
  doctor                   Doctor                 @relation(fields: [doctorId], references: [id])
  doctorId                 String
  MedicalExaminationType   MedicalExaminationType @relation(fields: [MedicalExaminationTypeId], references: [id])
  MedicalExaminationTypeId String

  // common
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalExaminationType {
  id          String  @id @default(cuid())
  name        String
  observation String?
  anexes      String?
  conclusion  String?

  // Relation
  medicalExamination MedicalExamination[]
  dimensions         Dimensions[]

  // common
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dimensions {
  id          String  @id @default(cuid())
  title       String?
  name        String
  measures    String
  description String?

  // Relation
  medicalExaminationType MedicalExaminationType[]

  // common
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
