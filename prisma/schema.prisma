generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../src/features/_global/domain/schemas/zod"
  useMultipleFiles                 = true
  createInputTypes                 = false
  addInputTypeValidation           = false
  validateWhereUniqueInput         = false
  createOptionalDefaultValuesTypes = true
  createPartialTypes               = true
  writeNullishInModelTypes         = true
}

enum TypeExam {
  Ultrasound
  Ray
  Resonance
}

model MedicalPatient {
  id                String  @id @default(cuid())
  rut               String  @unique
  name              String
  middleName        String?
  lastName          String
  secondaryLastName String?

  // Relation
  medicalExamination MedicalExamination[]

  // common
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Doctor {
  id                String   @id @default(cuid())
  name              String
  middleName        String?
  lastName          String
  secondaryLastName String?
  nameProfession    String[]
  specialization    String[]

  // Relation
  medicalExamination MedicalExamination[]

  // common
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MedicalExamination {
  id                   String   @id @default(cuid())
  dateExam             DateTime
  observation          String?
  anexes               String?
  conclusion           String?
  titleDimension       String?
  nameDimension        String?
  measureDimension     String?
  descriptionDimension String?

  // Relation
  medicalPatient           MedicalPatient         @relation(fields: [medicalPatientId], references: [id])
  medicalPatientId         String
  doctor                   Doctor                 @relation(fields: [doctorId], references: [id])
  doctorId                 String
  medicalExaminationType   MedicalExaminationType @relation(fields: [medicalExaminationTypeId], references: [id])
  medicalExaminationTypeId String

  // common
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalExaminationType {
  id   String   @id @default(cuid())
  name String
  type TypeExam

  // Relation
  medicalExamination MedicalExamination[]

  // common
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
